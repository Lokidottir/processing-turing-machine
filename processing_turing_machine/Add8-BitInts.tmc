//Fionan Haralddottir
//Example TM program that adds two 8-bit binary integers.
//The first integer is expected at bits 0-7 (zero-index),
//the second is expected at bits 8-15. The output is displayed
//in bits -8 to -1
[PAGE 0]
    scan -1
    //Call the adder page (1) 7 times messily after calling the half-adder once
    call 2
    scan -1
    call 1
    scan -1
    call 1
    scan -1
    call 1
    scan -1
    call 1
    scan -1
    call 1
    scan -1
    call 1
    scan -1
    call 1
    halt
[ENDPAGE]

[PAGE 1]
    //Adding two bits together, as a full adder
    //Get the two input bits, the carry is already on the bit at the head
    //It is assumed that after fetching the two inputs, that register #2
    //holds the Carry-in variable
    scan 8
    save
    scan 8
    save
    scan -16
    //perform the sum operation on the current bit.
    lgic or #0
    lgic xor #1
    lgic xor #2
    //move out of the sum bit, perform carry operation.
    scan -1
    lgic or #0
    lgic xor #1
    lgic and #2
    scan -1
    lgic or #0
    lgic and #1
    save
    ifbit
        flip
    endif
    scan 1
    lgic or #0
    spop
    //pop items on register and save the current bit
    spop
    spop
    spop
    save
    ifbit
        flip
    endif
    scan 1
[ENDPAGE]

[PAGE 2]
    //The half-adder page, performs a half-add logical operation on the current bit.
    //This page will result with a single remaining item in the stack at index #0, this
    //represents the Carry.
    //This page also clears the value at the current bit, so it doesn't interrupt the addition.
    scan 8
    save
    scan 8
    save
    scan -16
    ifbit
        //clear bit
        flip
    endif
    //sum gets written to bit
    lgic or #0
    lgic xor #1
    scan -1
    lgic or #0
    lgic and #1
    //clear registry of inputs
    spop
    spop
    //save carry to registry
    ifbit
        //set bit back if 1
        flip
    endif
    save
    scan 1
[ENDPAGE]
